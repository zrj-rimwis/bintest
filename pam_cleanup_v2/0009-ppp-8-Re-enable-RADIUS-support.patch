From ce937eab7b26c0130e783523573a6a45c60b44f3 Mon Sep 17 00:00:00 2001
From: zrj <rimvydas.jasinskas@gmail.com>
Date: Sun, 4 Aug 2019 13:55:44 +0300
Subject: [PATCH 9/9] ppp(8): Re-enable RADIUS support.

 Until it is really decided to remove it from ppp(8).

 While there, add patches from DPorts to use newer
 LibreSSL/OpenSSL v1.1.x api.
---
 usr.sbin/ppp/Makefile           |  8 ++--
 usr.sbin/ppp/libradius/radlib.c | 65 +++++++++++++++++----------------
 usr.sbin/ppp/libradius/radlib.h |  2 +-
 3 files changed, 40 insertions(+), 35 deletions(-)

diff --git a/usr.sbin/ppp/Makefile b/usr.sbin/ppp/Makefile
index 70c936fbce..e0741df833 100644
--- a/usr.sbin/ppp/Makefile
+++ b/usr.sbin/ppp/Makefile
@@ -60,13 +60,15 @@ CFLAGS+=-DNODES
 SRCS+=		chap_ms.c mppe.c
 .endif
 
-NORADIUS=
 .if defined(NORADIUS)
 CFLAGS+=-DNORADIUS
 .else
 SRCS+=	radius.c
-LDADD+=	-lradius
-DPADD+= ${LIBRADIUS}
+.PATH: ${.CURDIR}/libradius
+SRCS+=	radlib.c
+FLAGS_GROUPS+=	radiuz
+radiuz_FLAGS=	-I${.CURDIR}/libradius -DWITH_SSL
+radiuz_FLAGS_FILES= radius.c radlib.c
 .endif
 
 .if defined(WANT_NETGRAPH7)
diff --git a/usr.sbin/ppp/libradius/radlib.c b/usr.sbin/ppp/libradius/radlib.c
index 7a8237382b..6f00eeb029 100644
--- a/usr.sbin/ppp/libradius/radlib.c
+++ b/usr.sbin/ppp/libradius/radlib.c
@@ -23,7 +23,7 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  *
- *	$FreeBSD: src/lib/libradius/radlib.c,v 1.15 2009/09/29 19:09:17 mav Exp $
+ * $FreeBSD: head/lib/libradius/radlib.c 339270 2018-10-09 21:28:26Z gjb $
  */
 
 #include <sys/cdefs.h>
@@ -159,22 +159,21 @@ insert_message_authenticator(struct rad_handle *h, int resp)
 	u_char md[EVP_MAX_MD_SIZE];
 	u_int md_len;
 	const struct rad_server *srvp;
-	HMAC_CTX ctx;
+	HMAC_CTX *ctx;
 	srvp = &h->servers[h->srv];
 
 	if (h->authentic_pos != 0) {
-		HMAC_CTX_init(&ctx);
-		HMAC_Init(&ctx, srvp->secret, strlen(srvp->secret), EVP_md5());
-		HMAC_Update(&ctx, &h->out[POS_CODE], POS_AUTH - POS_CODE);
+		ctx = HMAC_CTX_new();
+		HMAC_Init_ex(ctx, srvp->secret, strlen(srvp->secret), EVP_md5(), NULL);
+		HMAC_Update(ctx, &h->out[POS_CODE], POS_AUTH - POS_CODE);
 		if (resp)
-		    HMAC_Update(&ctx, &h->in[POS_AUTH], LEN_AUTH);
+		    HMAC_Update(ctx, &h->in[POS_AUTH], LEN_AUTH);
 		else
-		    HMAC_Update(&ctx, &h->out[POS_AUTH], LEN_AUTH);
-		HMAC_Update(&ctx, &h->out[POS_ATTRS],
+		    HMAC_Update(ctx, &h->out[POS_AUTH], LEN_AUTH);
+		HMAC_Update(ctx, &h->out[POS_ATTRS],
 		    h->out_len - POS_ATTRS);
-		HMAC_Final(&ctx, md, &md_len);
-		HMAC_CTX_cleanup(&ctx);
-		HMAC_cleanup(&ctx);
+		HMAC_Final(ctx, md, &md_len);
+		HMAC_CTX_free(ctx);
 		memcpy(&h->out[h->authentic_pos + 2], md, md_len);
 	}
 #endif
@@ -193,7 +192,7 @@ is_valid_response(struct rad_handle *h, int srv,
 	const struct rad_server *srvp;
 	int len;
 #ifdef WITH_SSL
-	HMAC_CTX hctx;
+	HMAC_CTX *hctx;
 	u_char resp[MSGSIZE], md[EVP_MAX_MD_SIZE];
 	u_int md_len;
 	int pos;
@@ -235,31 +234,33 @@ is_valid_response(struct rad_handle *h, int srv,
 		pos = POS_ATTRS;
 
 		/* Search and verify the Message-Authenticator */
+		hctx = HMAC_CTX_new();
 		while (pos < len - 2) {
 
 			if (h->in[pos] == RAD_MESSAGE_AUTHENTIC) {
 				/* zero fill the Message-Authenticator */
 				memset(&resp[pos + 2], 0, MD5_DIGEST_LENGTH);
 
-				HMAC_CTX_init(&hctx);
-				HMAC_Init(&hctx, srvp->secret,
-				    strlen(srvp->secret), EVP_md5());
-				HMAC_Update(&hctx, &h->in[POS_CODE],
+				HMAC_Init_ex(hctx, srvp->secret,
+				    strlen(srvp->secret), EVP_md5(), NULL);
+				HMAC_Update(hctx, &h->in[POS_CODE],
 				    POS_AUTH - POS_CODE);
-				HMAC_Update(&hctx, &h->out[POS_AUTH],
+				HMAC_Update(hctx, &h->out[POS_AUTH],
 				    LEN_AUTH);
-				HMAC_Update(&hctx, &resp[POS_ATTRS],
+				HMAC_Update(hctx, &resp[POS_ATTRS],
 				    h->in_len - POS_ATTRS);
-				HMAC_Final(&hctx, md, &md_len);
-				HMAC_CTX_cleanup(&hctx);
-				HMAC_cleanup(&hctx);
+				HMAC_Final(hctx, md, &md_len);
+				HMAC_CTX_reset(hctx);
 				if (memcmp(md, &h->in[pos + 2],
-				    MD5_DIGEST_LENGTH) != 0)
+				    MD5_DIGEST_LENGTH) != 0) {
+					HMAC_CTX_free(hctx);
 					return 0;
+				}
 				break;
 			}
 			pos += h->in[pos + 1];
 		}
+		HMAC_CTX_free(hctx);
 	}
 #endif
 	return 1;
@@ -276,7 +277,7 @@ is_valid_request(struct rad_handle *h)
 	const struct rad_server *srvp;
 	int len;
 #ifdef WITH_SSL
-	HMAC_CTX hctx;
+	HMAC_CTX *hctx;
 	u_char resp[MSGSIZE], md[EVP_MAX_MD_SIZE];
 	u_int md_len;
 	int pos;
@@ -307,6 +308,7 @@ is_valid_request(struct rad_handle *h)
 #ifdef WITH_SSL
 	/* Search and verify the Message-Authenticator */
 	pos = POS_ATTRS;
+	hctx = HMAC_CTX_new();
 	while (pos < len - 2) {
 		if (h->in[pos] == RAD_MESSAGE_AUTHENTIC) {
 			memcpy(resp, h->in, MSGSIZE);
@@ -316,20 +318,21 @@ is_valid_request(struct rad_handle *h)
 			/* zero fill the Message-Authenticator */
 			memset(&resp[pos + 2], 0, MD5_DIGEST_LENGTH);
 
-			HMAC_CTX_init(&hctx);
-			HMAC_Init(&hctx, srvp->secret,
-			    strlen(srvp->secret), EVP_md5());
-			HMAC_Update(&hctx, resp, h->in_len);
-			HMAC_Final(&hctx, md, &md_len);
-			HMAC_CTX_cleanup(&hctx);
-			HMAC_cleanup(&hctx);
+			HMAC_Init_ex(hctx, srvp->secret,
+			    strlen(srvp->secret), EVP_md5(), NULL);
+			HMAC_Update(hctx, resp, h->in_len);
+			HMAC_Final(hctx, md, &md_len);
+			HMAC_CTX_reset(hctx);
 			if (memcmp(md, &h->in[pos + 2],
-			    MD5_DIGEST_LENGTH) != 0)
+			    MD5_DIGEST_LENGTH) != 0) {
+				HMAC_CTX_free(hctx);
 				return (0);
+			}
 			break;
 		}
 		pos += h->in[pos + 1];
 	}
+	HMAC_CTX_free(hctx);
 #endif
 	return (1);
 }
diff --git a/usr.sbin/ppp/libradius/radlib.h b/usr.sbin/ppp/libradius/radlib.h
index 5d7ac7dfcd..7ecd7440e0 100644
--- a/usr.sbin/ppp/libradius/radlib.h
+++ b/usr.sbin/ppp/libradius/radlib.h
@@ -98,7 +98,7 @@
 #define RAD_TERMINATION_ACTION		29	/* Integer */
 #define RAD_CALLED_STATION_ID		30	/* String */
 #define RAD_CALLING_STATION_ID		31	/* String */
-#define RAD_NAS_IDENTIFIER		32	/* Integer */
+#define RAD_NAS_IDENTIFIER		32	/* String */
 #define RAD_PROXY_STATE			33	/* Integer */
 #define RAD_LOGIN_LAT_SERVICE		34	/* Integer */
 #define RAD_LOGIN_LAT_NODE		35	/* Integer */
-- 
2.22.0

