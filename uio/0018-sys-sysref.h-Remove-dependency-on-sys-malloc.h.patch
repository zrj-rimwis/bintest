From fb8a2072bc323f8f85eb965b81478e23efd6425e Mon Sep 17 00:00:00 2001
From: zrj <rimvydas.jasinskas@gmail.com>
Date: Mon, 21 Oct 2019 11:05:43 +0300
Subject: [PATCH 18/39] <sys/sysref.h>: Remove dependency on <sys/malloc.h>.

 * Use forward declarations.
 * Make <sys/sysref2.h> a kernel only header.
 * Remove sys/types.h includes that follow <sys/param.h> in devfs.
 * Add sys/malloc.h includes where it is actually used in sources.

 While there, minor whitespace cleanup.
---
 sys/dev/disk/dm/delay/dm_target_delay.c   |  2 ++
 sys/dev/disk/dm/flakey/dm_target_flakey.c |  2 ++
 sys/dev/powermng/coretemp/coretemp.c      |  1 +
 sys/dev/smbus/atmel_mxt/atmel_mxt.c       |  1 +
 sys/kern/kern_sysref.c                    | 11 ++++++-----
 sys/kern/lwkt_thread.c                    | 17 +++++++++--------
 sys/kern/subr_disklabel64.c               |  1 +
 sys/sys/sysref.h                          | 21 +++++++++------------
 sys/sys/sysref2.h                         | 14 +++++++++-----
 sys/vfs/devfs/devfs_core.c                |  1 -
 sys/vfs/devfs/devfs_helper.c              |  2 +-
 sys/vfs/devfs/devfs_rules.c               |  2 +-
 sys/vfs/devfs/devfs_vfsops.c              |  1 +
 sys/vfs/ufs/ffs_alloc.c                   |  1 +
 14 files changed, 44 insertions(+), 33 deletions(-)

diff --git a/sys/dev/disk/dm/delay/dm_target_delay.c b/sys/dev/disk/dm/delay/dm_target_delay.c
index 5fbb78a048..669348818b 100644
--- a/sys/dev/disk/dm/delay/dm_target_delay.c
+++ b/sys/dev/disk/dm/delay/dm_target_delay.c
@@ -32,6 +32,8 @@
  * SUCH DAMAGE.
  */
 
+#include <sys/param.h>
+#include <sys/malloc.h>
 #include <sys/mutex2.h>
 #include <sys/objcache.h>
 #include <sys/callout.h>
diff --git a/sys/dev/disk/dm/flakey/dm_target_flakey.c b/sys/dev/disk/dm/flakey/dm_target_flakey.c
index a5eb06e6f8..d54b136d15 100644
--- a/sys/dev/disk/dm/flakey/dm_target_flakey.c
+++ b/sys/dev/disk/dm/flakey/dm_target_flakey.c
@@ -32,6 +32,8 @@
  * SUCH DAMAGE.
  */
 
+#include <sys/param.h>
+#include <sys/malloc.h>
 #include <dev/disk/dm/dm.h>
 
 MALLOC_DEFINE(M_DMFLAKEY, "dm_flakey", "Device Mapper Target Flakey");
diff --git a/sys/dev/powermng/coretemp/coretemp.c b/sys/dev/powermng/coretemp/coretemp.c
index cc89ce3e65..0a55c3ca3e 100644
--- a/sys/dev/powermng/coretemp/coretemp.c
+++ b/sys/dev/powermng/coretemp/coretemp.c
@@ -38,6 +38,7 @@
 #include <sys/conf.h>
 #include <sys/cpu_topology.h>
 #include <sys/kernel.h>
+#include <sys/malloc.h>
 #include <sys/sensors.h>
 #include <sys/proc.h>	/* for curthread */
 #include <sys/sched.h>
diff --git a/sys/dev/smbus/atmel_mxt/atmel_mxt.c b/sys/dev/smbus/atmel_mxt/atmel_mxt.c
index 0218239364..40ed934ed3 100644
--- a/sys/dev/smbus/atmel_mxt/atmel_mxt.c
+++ b/sys/dev/smbus/atmel_mxt/atmel_mxt.c
@@ -148,6 +148,7 @@
 #include <sys/param.h>
 #include <sys/systm.h>
 #include <sys/device.h>
+#include <sys/malloc.h>
 #include <sys/module.h>
 #include <sys/bus.h>
 #include <sys/conf.h>
diff --git a/sys/kern/kern_sysref.c b/sys/kern/kern_sysref.c
index 3b9e54e9a2..095a8c3608 100644
--- a/sys/kern/kern_sysref.c
+++ b/sys/kern/kern_sysref.c
@@ -1,13 +1,13 @@
 /*
  * Copyright (c) 2007 The DragonFly Project.  All rights reserved.
- * 
+ *
  * This code is derived from software contributed to The DragonFly Project
  * by Matthew Dillon <dillon@backplane.com>
- * 
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
- * 
+ *
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
@@ -17,7 +17,7 @@
  * 3. Neither the name of The DragonFly Project nor the names of its
  *    contributors may be used to endorse or promote products derived
  *    from this software without specific, prior written permission.
- * 
+ *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
@@ -48,6 +48,7 @@
 #include <sys/param.h>
 #include <sys/systm.h>
 #include <sys/kernel.h>
+#include <sys/malloc.h>
 #include <sys/tree.h>
 #include <sys/spinlock.h>
 #include <machine/atomic.h>
@@ -141,7 +142,7 @@ sysref_alloc(struct sysref_class *srclass)
 	if (srclass->oc == NULL) {
 		KKASSERT(srclass->mtype != NULL);
 		srclass->oc = objcache_create_mbacked(
-				srclass->mtype, srclass->objsize, 
+				srclass->mtype, srclass->objsize,
 				0, srclass->nom_cache,
 				sysref_ctor, sysref_dtor, srclass);
 	}
diff --git a/sys/kern/lwkt_thread.c b/sys/kern/lwkt_thread.c
index 8df2c9fbcf..deeb207b3d 100644
--- a/sys/kern/lwkt_thread.c
+++ b/sys/kern/lwkt_thread.c
@@ -35,7 +35,7 @@
 /*
  * Each cpu in a system has its own self-contained light weight kernel
  * thread scheduler, which means that generally speaking we only need
- * to use a critical section to avoid problems.  Foreign thread 
+ * to use a critical section to avoid problems.  Foreign thread
  * scheduling is queued via (async) IPIs.
  */
 
@@ -45,6 +45,7 @@
 #include <sys/proc.h>
 #include <sys/rtprio.h>
 #include <sys/kinfo.h>
+#include <sys/malloc.h>
 #include <sys/queue.h>
 #include <sys/sysctl.h>
 #include <sys/kthread.h>
@@ -119,9 +120,9 @@ SYSCTL_INT(_lwkt, OID_AUTO, panic_on_cscount, CTLFLAG_RW, &panic_on_cscount, 0,
 #ifdef DEBUG_LWKT_THREAD
 SYSCTL_QUAD(_lwkt, OID_AUTO, switch_count, CTLFLAG_RW, &switch_count, 0,
     "Number of switched threads");
-SYSCTL_QUAD(_lwkt, OID_AUTO, preempt_hit, CTLFLAG_RW, &preempt_hit, 0, 
+SYSCTL_QUAD(_lwkt, OID_AUTO, preempt_hit, CTLFLAG_RW, &preempt_hit, 0,
     "Successful preemption events");
-SYSCTL_QUAD(_lwkt, OID_AUTO, preempt_miss, CTLFLAG_RW, &preempt_miss, 0, 
+SYSCTL_QUAD(_lwkt, OID_AUTO, preempt_miss, CTLFLAG_RW, &preempt_miss, 0,
     "Failed preemption events");
 SYSCTL_QUAD(_lwkt, OID_AUTO, preempt_weird, CTLFLAG_RW, &preempt_weird, 0,
     "Number of preempted threads.");
@@ -413,7 +414,7 @@ lwkt_alloc_thread(struct thread *td, int stksize, int cpu, int flags)
  *
  * All threads start out in a critical section at a priority of
  * TDPRI_KERN_DAEMON.  Higher level code will modify the priority as
- * appropriate.  This function may send an IPI message when the 
+ * appropriate.  This function may send an IPI message when the
  * requested cpu is not the current cpu and consequently gd_tdallq may
  * not be initialized synchronously from the point of view of the originating
  * cpu.
@@ -528,7 +529,7 @@ lwkt_free_thread(thread_t td)
 
 
 /*
- * Switch to the next runnable lwkt.  If no LWKTs are runnable then 
+ * Switch to the next runnable lwkt.  If no LWKTs are runnable then
  * switch to the idlethread.  Switching must occur within a critical
  * section to avoid races with the scheduling queue.
  *
@@ -1410,8 +1411,8 @@ lwkt_acquire(thread_t td)
 
 /*
  * Generic deschedule.  Descheduling threads other then your own should be
- * done only in carefully controlled circumstances.  Descheduling is 
- * asynchronous.  
+ * done only in carefully controlled circumstances.  Descheduling is
+ * asynchronous.
  *
  * This function may block if the cpu has run out of messages.
  */
@@ -1530,7 +1531,7 @@ lwkt_schedulerclock(thread_t td)
 }
 
 /*
- * Migrate the current thread to the specified cpu. 
+ * Migrate the current thread to the specified cpu.
  *
  * This is accomplished by descheduling ourselves from the current cpu
  * and setting td_migrate_gd.  The lwkt_switch() code will detect that the
diff --git a/sys/kern/subr_disklabel64.c b/sys/kern/subr_disklabel64.c
index d83743bd4b..478ab04a3c 100644
--- a/sys/kern/subr_disklabel64.c
+++ b/sys/kern/subr_disklabel64.c
@@ -35,6 +35,7 @@
 #include <sys/param.h>
 #include <sys/systm.h>
 #include <sys/kernel.h>
+#include <sys/malloc.h>
 #include <sys/conf.h>
 #include <sys/disklabel.h>
 #include <sys/disklabel64.h>
diff --git a/sys/sys/sysref.h b/sys/sys/sysref.h
index e5d05b0bda..cd29deb8b7 100644
--- a/sys/sys/sysref.h
+++ b/sys/sys/sysref.h
@@ -1,13 +1,13 @@
 /*
  * Copyright (c) 2007 The DragonFly Project.  All rights reserved.
- * 
+ *
  * This code is derived from software contributed to The DragonFly Project
  * by Matthew Dillon <dillon@backplane.com>
- * 
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
- * 
+ *
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
@@ -17,7 +17,7 @@
  * 3. Neither the name of The DragonFly Project nor the names of its
  *    contributors may be used to endorse or promote products derived
  *    from this software without specific, prior written permission.
- * 
+ *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
@@ -30,8 +30,6 @@
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
- * 
- * $DragonFly: src/sys/sys/sysref.h,v 1.4 2007/05/29 17:01:02 dillon Exp $
  */
 /*
  * System resource registration, reference counter, and allocation
@@ -57,16 +55,13 @@
 #ifndef _SYS_OBJCACHE_H_
 #include <sys/objcache.h>
 #endif
-#ifndef _SYS_MALLOC_H_
-#include <sys/malloc.h>
-#endif
 
 #if defined(_KERNEL) || defined(_KERNEL_STRUCTURES)
 
 /*
  * Register a resource structure type.  Note that the destroy function
  * will be called on 1->0 transitions (really 1->-0x40000000 transitions),
- * and the free function 
+ * and the free function
  * but the free function can be called via an IPI, without the BGL, and
  * must be carefully coded if it does anything more complex then objcache_put
  */
@@ -74,9 +69,11 @@ typedef void (*sysref_terminate_func_t)(void *);
 typedef void (*sysref_lock_func_t)(void *);
 typedef void (*sysref_unlock_func_t)(void *);
 
+struct malloc_type;
+
 struct sysref_class {
 	const char *name;		/* name of the system resource */
-	malloc_type_t mtype;		/* malloc backing store */
+	struct malloc_type *mtype;	/* malloc backing store */
 	int	proto;			/* RPC protocol id */
 	int	offset;			/* offset of sysref in resource */
 	int	objsize;		/* size of the resource structure */
@@ -145,4 +142,4 @@ sysid_t allocsysid(void);
 
 #endif
 
-#endif
+#endif	/* !_SYS_SYSREF_H_ */
diff --git a/sys/sys/sysref2.h b/sys/sys/sysref2.h
index ef9dedcc6e..66b0fe2915 100644
--- a/sys/sys/sysref2.h
+++ b/sys/sys/sysref2.h
@@ -1,13 +1,13 @@
 /*
  * Copyright (c) 2007 The DragonFly Project.  All rights reserved.
- * 
+ *
  * This code is derived from software contributed to The DragonFly Project
  * by Matthew Dillon <dillon@backplane.com>
- * 
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
- * 
+ *
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
@@ -17,7 +17,7 @@
  * 3. Neither the name of The DragonFly Project nor the names of its
  *    contributors may be used to endorse or promote products derived
  *    from this software without specific, prior written permission.
- * 
+ *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
@@ -45,6 +45,10 @@
 #ifndef _SYS_SYSREF2_H_
 #define _SYS_SYSREF2_H_
 
+#ifndef _KERNEL
+#error "This file should not be included by userland programs."
+#endif
+
 #ifndef _SYS_SYSREF_H_
 #include <sys/sysref.h>
 #endif
@@ -121,4 +125,4 @@ void sysref_activate(struct sysref *);
 
 #endif
 
-#endif
+#endif	/* !_SYS_SYSREF2_H_ */
diff --git a/sys/vfs/devfs/devfs_core.c b/sys/vfs/devfs/devfs_core.c
index 07b5c81d86..ae628d007e 100644
--- a/sys/vfs/devfs/devfs_core.c
+++ b/sys/vfs/devfs/devfs_core.c
@@ -37,7 +37,6 @@
 #include <sys/bus.h>
 #include <sys/mount.h>
 #include <sys/vnode.h>
-#include <sys/types.h>
 #include <sys/lock.h>
 #include <sys/file.h>
 #include <sys/msgport.h>
diff --git a/sys/vfs/devfs/devfs_helper.c b/sys/vfs/devfs/devfs_helper.c
index 92b10ac6e8..e92e6ad2d6 100644
--- a/sys/vfs/devfs/devfs_helper.c
+++ b/sys/vfs/devfs/devfs_helper.c
@@ -34,7 +34,7 @@
 #include <sys/param.h>
 #include <sys/systm.h>
 #include <sys/kernel.h>
-#include <sys/types.h>
+#include <sys/malloc.h>
 #include <machine/limits.h>
 #include <sys/devfs.h>
 
diff --git a/sys/vfs/devfs/devfs_rules.c b/sys/vfs/devfs/devfs_rules.c
index f27e11f8fd..5c31af5644 100644
--- a/sys/vfs/devfs/devfs_rules.c
+++ b/sys/vfs/devfs/devfs_rules.c
@@ -34,7 +34,7 @@
 #include <sys/param.h>
 #include <sys/systm.h>
 #include <sys/kernel.h>
-#include <sys/types.h>
+#include <sys/malloc.h>
 #include <sys/lock.h>
 #include <sys/spinlock2.h>
 #include <sys/fcntl.h>
diff --git a/sys/vfs/devfs/devfs_vfsops.c b/sys/vfs/devfs/devfs_vfsops.c
index 42b2e25042..3b158ae96d 100644
--- a/sys/vfs/devfs/devfs_vfsops.c
+++ b/sys/vfs/devfs/devfs_vfsops.c
@@ -36,6 +36,7 @@
 #include <sys/param.h>
 #include <sys/systm.h>
 #include <sys/kernel.h>
+#include <sys/malloc.h>
 #include <sys/mount.h>
 #include <sys/namecache.h>
 #include <sys/vnode.h>
diff --git a/sys/vfs/ufs/ffs_alloc.c b/sys/vfs/ufs/ffs_alloc.c
index 61c5265c80..42aaf6e405 100644
--- a/sys/vfs/ufs/ffs_alloc.c
+++ b/sys/vfs/ufs/ffs_alloc.c
@@ -36,6 +36,7 @@
 #include <sys/systm.h>
 #include <sys/buf.h>
 #include <sys/conf.h>
+#include <sys/malloc.h>
 #include <sys/proc.h>
 #include <sys/vnode.h>
 #include <sys/mount.h>
-- 
2.23.0

