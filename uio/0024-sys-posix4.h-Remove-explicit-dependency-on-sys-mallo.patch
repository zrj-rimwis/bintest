From 289e36ca700f4f99418b78930766343f9fd859b7 Mon Sep 17 00:00:00 2001
From: zrj <rimvydas.jasinskas@gmail.com>
Date: Tue, 22 Oct 2019 09:13:41 +0300
Subject: [PATCH 24/39] <sys/posix4.h>: Remove explicit dependency on
 <sys/malloc.h>.

---
 sys/kern/kern_p1003_1b.c | 5 +++--
 sys/kern/kern_sched.c    | 1 +
 sys/sys/posix4.h         | 5 +++--
 3 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/sys/kern/kern_p1003_1b.c b/sys/kern/kern_p1003_1b.c
index 83b00c7613..bc2baf4de7 100644
--- a/sys/kern/kern_p1003_1b.c
+++ b/sys/kern/kern_p1003_1b.c
@@ -39,6 +39,7 @@
 #include <sys/systm.h>
 #include <sys/kernel.h>
 #include <sys/sysent.h>
+#include <sys/malloc.h>
 #include <sys/posix4.h>
 #include <sys/proc.h>
 #include <sys/syslog.h>
@@ -223,7 +224,7 @@ sys_sched_getparam(struct sched_getparam_args *uap)
 	struct lwp *lp;
 	struct sched_param sched_param;
 	int e;
- 
+
 	if ((e = p31b_proc(uap->pid, &targetp)) == 0) {
 		lp = FIRST_LWP_IN_PROC(targetp); /* XXX lwp */
 		if (lp) {
@@ -277,7 +278,7 @@ sys_sched_getscheduler(struct sched_getscheduler_args *uap)
 	struct proc *targetp;
 	struct lwp *lp;
 	int e;
- 
+
 	if ((e = p31b_proc(uap->pid, &targetp)) == 0) {
 		lp = FIRST_LWP_IN_PROC(targetp); /* XXX lwp */
 		if (lp) {
diff --git a/sys/kern/kern_sched.c b/sys/kern/kern_sched.c
index 4b423c1f2a..9e9a5552c2 100644
--- a/sys/kern/kern_sched.c
+++ b/sys/kern/kern_sched.c
@@ -38,6 +38,7 @@
 
 #include <sys/param.h>
 #include <sys/systm.h>
+#include <sys/malloc.h>
 #include <sys/posix4.h>
 #include <sys/proc.h>
 #include <sys/kernel.h>
diff --git a/sys/sys/posix4.h b/sys/sys/posix4.h
index f365caf737..08c5f01460 100644
--- a/sys/sys/posix4.h
+++ b/sys/sys/posix4.h
@@ -44,10 +44,11 @@
 #include "opt_posix.h"
 
 #include <sys/param.h>
-#include <sys/malloc.h>
 #include <sys/sched.h>
 
+#ifdef MALLOC_DECLARE
 MALLOC_DECLARE(M_P31B);
+#endif
 
 #define p31b_malloc(SIZE) kmalloc((SIZE), M_P31B, M_WAITOK)
 #define p31b_free(P) kfree((P), M_P31B)
@@ -59,7 +60,7 @@ void p31b_setcfg (int, int);
 
 #ifdef _KPOSIX_PRIORITY_SCHEDULING
 
-/* 
+/*
  * KSCHED_OP_RW is a vector of read/write flags for each entry indexed
  * by the enum ksched_op.
  *
-- 
2.23.0

