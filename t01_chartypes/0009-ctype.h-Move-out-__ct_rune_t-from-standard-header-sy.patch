From 1a54b5a98825c7ad762da4cd08856d337dc02689 Mon Sep 17 00:00:00 2001
From: zrj <rimvydas.jasinskas@gmail.com>
Date: Mon, 12 Aug 2019 15:18:54 +0300
Subject: [PATCH 09/12] <ctype.h>: Move out __ct_rune_t from standard header
 <sys/types.h>.

 Kernel does not use rune_t types, this change essentially removes
 rune_t types from kernel namespace (rune_t types were intended to be
 used only internally in libc/locale/ scope).

 Extract ctype character type setup to common <machine/ctype.h>.
 The __ctype_t consumers are only <ctype.h> and <runetypes.h>.
 All <runetype.h> consumers already include <ctype.h>, so non standard
 type declaration could be technically embededed directly in <ctype.h>.
 ANSI requires that ctype types should be of type `int' so it is
 debatable if such custom type is needed at all.  For now use use
 separate MD header that will only be invoked by <ctype.h>.
---
 include/ctype.h                |  1 +
 include/runetype.h             |  1 +
 sys/cpu/x86_64/include/ctype.h | 44 ++++++++++++++++++++++++++++++++++
 sys/sys/types.h                | 17 -------------
 4 files changed, 46 insertions(+), 17 deletions(-)
 create mode 100644 sys/cpu/x86_64/include/ctype.h

diff --git a/include/ctype.h b/include/ctype.h
index 1b5b1769c0..ccef1bd498 100644
--- a/include/ctype.h
+++ b/include/ctype.h
@@ -43,6 +43,7 @@
 
 #include <sys/cdefs.h>
 #include <sys/types.h>
+#include <machine/ctype.h>
 
 #define	_CTYPE_A	0x00000100L		/* Alpha */
 #define	_CTYPE_C	0x00000200L		/* Control */
diff --git a/include/runetype.h b/include/runetype.h
index 15498519fc..6998baafb6 100644
--- a/include/runetype.h
+++ b/include/runetype.h
@@ -38,6 +38,7 @@
 
 #include <sys/cdefs.h>
 #include <sys/types.h>
+#include <machine/ctype.h>
 
 #define	_CACHED_RUNES	(1 <<8 )	/* Must be a power of 2 */
 #define	_CRMASK		(~(_CACHED_RUNES - 1))
diff --git a/sys/cpu/x86_64/include/ctype.h b/sys/cpu/x86_64/include/ctype.h
new file mode 100644
index 0000000000..94cb7a3534
--- /dev/null
+++ b/sys/cpu/x86_64/include/ctype.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2019 The DragonFly Project.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _CPU_CTYPE_H_
+#define _CPU_CTYPE_H_
+
+/*
+ * rune_t is declared to be an ``int'' instead of the more natural
+ * ``unsigned long'' or ``long''.  Two things are happening here.  It is not
+ * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,
+ * it looks like 10646 will be a 31 bit standard.  This means that if your
+ * ints cannot hold 32 bits, you will be in trouble.  The reason an int was
+ * chosen over a long is that the is*() and to*() routines take ints (says
+ * ANSI C), but they use __ct_rune_t instead of int.
+ *
+ * NOTE: rune_t is not covered by ANSI nor other standards, and should not
+ * be instantiated outside of lib/libc/locale.  Use wchar_t.
+ */
+typedef	int		__ct_rune_t;	/* arg type for ctype funcs */
+
+#endif /* !_CPU_CTYPE_H_ */
diff --git a/sys/sys/types.h b/sys/sys/types.h
index 5fd56e0fa3..d62106b2e6 100644
--- a/sys/sys/types.h
+++ b/sys/sys/types.h
@@ -252,21 +252,4 @@ typedef	__timer_t	timer_t;
 
 #endif /* __BSD_VISIBLE */
 
-/*
- * rune_t is declared to be an ``int'' instead of the more natural
- * ``unsigned long'' or ``long''.  Two things are happening here.  It is not
- * unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,
- * it looks like 10646 will be a 31 bit standard.  This means that if your
- * ints cannot hold 32 bits, you will be in trouble.  The reason an int was
- * chosen over a long is that the is*() and to*() routines take ints (says
- * ANSI C), but they use __ct_rune_t instead of int.
- *
- * NOTE: rune_t is not covered by ANSI nor other standards, and should not
- * be instantiated outside of lib/libc/locale.  Use wchar_t.  wint_t and
- * rune_t must be the same type.  Also, wint_t should be able to hold all
- * members of the largest character set plus one extra value (WEOF), and
- * must be at least 16 bits.
- */
-typedef	int		__ct_rune_t;	/* arg type for ctype funcs */
-
 #endif /* !_SYS_TYPES_H_ */
-- 
2.22.0

