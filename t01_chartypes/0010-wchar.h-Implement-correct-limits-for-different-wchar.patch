From ea9442c7c04c4268c41c37b56e2143b2ffc7ea03 Mon Sep 17 00:00:00 2001
From: zrj <rimvydas.jasinskas@gmail.com>
Date: Mon, 12 Aug 2019 16:46:21 +0300
Subject: [PATCH 10/12] <wchar.h>: Implement correct limits for different
 wchar_t flavors.

 Try best to select correct limits while always using handpicked standard
 C wchar_t bounds that match internal rune_t and standard wint_t types.
 It might be worth to switch to using compiler provided limits for all.
 The <stdint.h> header should provide limits for all types in standard
 headers, so provide wint_t (<wchar.h>, <wctype.h>) limits too.
 The <machine/wchar_limits.h> idea stolen from NetBSD.
---
 include/stdint.h                      | 21 ++++++++-
 include/wchar.h                       |  5 ++-
 sys/cpu/x86_64/include/int_limits.h   | 22 +---------
 sys/cpu/x86_64/include/wchar_limits.h | 61 +++++++++++++++++++++++++++
 4 files changed, 85 insertions(+), 24 deletions(-)
 create mode 100644 sys/cpu/x86_64/include/wchar_limits.h

diff --git a/include/stdint.h b/include/stdint.h
index d489f9ffc4..deec0d395c 100644
--- a/include/stdint.h
+++ b/include/stdint.h
@@ -22,8 +22,6 @@
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
- *
- * $DragonFly: src/include/stdint.h,v 1.2 2003/11/15 19:28:42 asmodai Exp $
  */
 
 #ifndef _STDINT_H_
@@ -75,6 +73,25 @@ typedef __uint_least64_t	uint_least64_t;
 
 #if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
 #include <machine/int_limits.h>
+#include <machine/wchar_limits.h>
+
+/* Also possibly defined in <wchar.h> */
+/* Limits of wchar_t. */
+#ifndef WCHAR_MIN
+#define	WCHAR_MIN	___WCHAR_MIN
+#endif
+#ifndef WCHAR_MAX
+#define	WCHAR_MAX	___WCHAR_MAX
+#endif
+
+/* Limits of wint_t. */
+#ifndef WINT_MIN
+#define	WINT_MIN	__WINT_MIN
+#endif
+#ifndef WINT_MAX
+#define	WINT_MAX	__WINT_MAX
+#endif
+
 #endif
 
 #endif
diff --git a/include/wchar.h b/include/wchar.h
index 72b597da3c..789ec822b6 100644
--- a/include/wchar.h
+++ b/include/wchar.h
@@ -65,6 +65,7 @@
 #include <sys/types.h>
 #include <machine/limits.h>
 #include <machine/stdarg.h> /* for __va_list */
+#include <machine/wchar_limits.h>
 #include <machine/wchar.h>
 #include <ctype.h>
 
@@ -86,11 +87,11 @@ typedef	___wchar_t	wchar_t;
 #endif
 
 #ifndef WCHAR_MIN
-#define	WCHAR_MIN	INT_MIN
+#define	WCHAR_MIN	___WCHAR_MIN
 #endif
 
 #ifndef WCHAR_MAX
-#define	WCHAR_MAX	INT_MAX
+#define	WCHAR_MAX	___WCHAR_MAX
 #endif
 
 #ifndef _WINT_T_DECLARED
diff --git a/sys/cpu/x86_64/include/int_limits.h b/sys/cpu/x86_64/include/int_limits.h
index 122f946fae..99f4af5d4a 100644
--- a/sys/cpu/x86_64/include/int_limits.h
+++ b/sys/cpu/x86_64/include/int_limits.h
@@ -1,7 +1,7 @@
 /*-
  * Copyright (c) 2001, 2002 Mike Barcroft <mike@FreeBSD.org>
  * Copyright (c) 2001 The NetBSD Foundation, Inc.  All rights reserved.
- * Copyright (c) 1990, 1993 The Regents of the University of California. 
+ * Copyright (c) 1990, 1993 The Regents of the University of California.
  *		All rights reserved.
  *
  * This code is derived from software contributed to The NetBSD Foundation
@@ -82,7 +82,7 @@
  * 7.18.3  Limits of other integer types
  */
 /* Limits of ptrdiff_t. */
-#define	PTRDIFF_MIN	INT64_MIN	
+#define	PTRDIFF_MIN	INT64_MIN
 #define	PTRDIFF_MAX	INT64_MAX
 
 /* Limits of sig_atomic_t. */
@@ -92,24 +92,6 @@
 /* Limit of size_t. */
 #define	SIZE_MAX	UINT64_MAX
 
-/* XXX possibly should be removed from here */
-/* Also possibly defined in <wchar.h> */
-/* Limits of wchar_t. */
-#ifndef WCHAR_MIN
-#define	WCHAR_MIN	INT32_MIN
-#endif
-#ifndef WCHAR_MAX
-#define	WCHAR_MAX	INT32_MAX
-#endif
-
-/* Limits of wint_t. */
-#ifndef WINT_MIN
-#define	WINT_MIN	INT32_MIN
-#endif
-#ifndef WINT_MAX
-#define	WINT_MAX	INT32_MAX
-#endif
-
 /*
  * ISO/IEC 9899:1999
  * 7.18.2.2  Limits of minimum-width integer types
diff --git a/sys/cpu/x86_64/include/wchar_limits.h b/sys/cpu/x86_64/include/wchar_limits.h
new file mode 100644
index 0000000000..d6f3110867
--- /dev/null
+++ b/sys/cpu/x86_64/include/wchar_limits.h
@@ -0,0 +1,61 @@
+/*
+ * Copyright (c) 2019 The DragonFly Project.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _CPU_WCHAR_LIMITS_H_
+#define _CPU_WCHAR_LIMITS_H_
+
+/*
+ * 7.18.3 Limits of other integer types
+ */
+
+/*
+ * The wchar_t type is a builtin type in c++, we assume that compiler
+ * provides correct type and limits, otherwise use fallback values.
+ * Allow compiler to override wchar_t limits with -fshort-wchar.
+ */
+
+/* Limits of wchar_t. */
+#if defined(__cplusplus) && defined(__WCHAR_MAX__) && defined(__WCHAR_MIN__)
+#define	___WCHAR_MIN	__WCHAR_MIN__	/* min value for c++ wchar_t */
+#define	___WCHAR_MAX	__WCHAR_MAX__	/* max value for c++ wchar_t */
+#elif defined(__SIZEOF_WCHAR_T__) && __SIZEOF_WCHAR_T__ == 2
+#if defined(__WCHAR_MAX__) && defined(__WCHAR_MIN__)
+#define	___WCHAR_MIN	__WCHAR_MIN__	/* min value for short wchar_t */
+#define	___WCHAR_MAX	__WCHAR_MAX__	/* max value for short wchar_t */
+#else
+#define	___WCHAR_MIN	0	/* min value for short wchar_t (well zero) */
+#define	___WCHAR_MAX	0xffff	/* max value for short wchar_t (UINT16_MAX) */
+#endif
+#else
+#define	___WCHAR_MIN	(-0x7fffffff-1)	/* min value for wchar_t (INT32_MIN) */
+#define	___WCHAR_MAX	0x7fffffff	/* max value for wchar_t (INT32_MAX) */
+#endif
+
+/* Limits of wint_t. */
+#define	__WINT_MIN	(-0x7fffffff-1)	/* min value for wint_t (INT32_MIN) */
+#define	__WINT_MAX	0x7fffffff	/* max value for wint_t (INT32_MAX) */
+
+#endif /* !_CPU_WCHAR_LIMITS_H_ */
-- 
2.22.0

